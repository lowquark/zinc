#!/usr/bin/lua

local ast = require 'ast'
local parse = require 'parse'
local ir = require 'ir'
local compile = require 'compile'
local generate = require 'generate'

----------------------------------------------------------------------------------------------------

io.output(io.stderr)

local function exit_usage()
  io.write('Usage: '..arg[0]..' <infile> [outfile]\n')
  os.exit(1)
end

local function exit_error(errstr)
  io.write(arg[0]..': Error: '..errstr..'\n')
  os.exit(1)
end

local filename_in = arg[1]
if not filename_in then exit_usage() end

local filename_out = arg[2]

if filename_in == filename_out then
  exit_error('infile must not match outfile')
end

local file_in = io.open(filename_in)
if not file_in then
  io.write('Failed to open `'..filename_in..'` for reading\n')
  os.exit(2)
end

local file_out
if filename_out then
  file_out = io.open(filename_out, "w")
  if not file_out then
    io.write('Failed to open `'..filename_out..'` for writing\n')
    os.exit(2)
  end
else
  file_out = io.stdout
end

----------------------------------------------------------------------------------------------------

local syntax_tree = parse(file_in)

local divider = string.rep('-', 100)..'\n'

io.write(divider)

ast.dump(syntax_tree)

io.write(divider)

proto_code = compile(syntax_tree)

io.write(divider)

ir.dump(proto_code)

io.write(divider)

generate(proto_code, file_out)

io.write(divider)

