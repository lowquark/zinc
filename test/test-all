#!/bin/bash

ZNC='../znc/znc'
ZNC_LUA_PATH='../znc/?.lua'

OPTION="$1"

FAILED="\033[38;5;9mFAILED\033[39m"
PASSED="\033[38;5;10mPASSED\033[39m"
STATUS_MSG_WIDTH=60

export LUA_PATH=$ZNC_LUA_PATH

function on_exit() {
  rm -f a.out
  rm -f asm.s
}

trap on_exit EXIT

function handle_failure() {
  # $1 - filename
  # $2 - message

  printf "%-${STATUS_MSG_WIDTH}b %b\n" "$2" "$FAILED"
  if [ "$OPTION" == "bench" ]; then
    echo "Copying $1 to bench.zn"
    cp "$1" bench.zn
  fi
  exit 1
}

function test() {
  # $1 - filename
  # $2 - expected program return value

  echo -ne "\033[38;5;8m"
  echo "znc $1 asm.s"
  echo -ne "\033[39m"

  eval $ZNC $1 asm.s >/dev/null 2>/dev/null
  RESULT=$?

  if [ "$RESULT" -ne 0 ]; then
    handle_failure "$1" "znc returned error $RESULT"
  fi

  echo -ne "\033[38;5;8m"
  echo "gcc -g -m64 asm.s -o a.out"
  echo -ne "\033[39m"

  gcc -g -m64 asm.s -o a.out
  RESULT=$?

  if [ "$RESULT" -ne 0 ]; then
    handle_failure "$1" "gcc returned error $RESULT"
  fi

  echo -ne "\033[38;5;8m"
  echo -e "./a.out"
  echo -ne "\033[39m"

  ./a.out
  RESULT=$?

  echo -ne "\033[39m"
  if [ "$RESULT" == "$2" ]; then
    printf "%-${STATUS_MSG_WIDTH}s %b\n" "$1 -> $RESULT" "$PASSED"
  else
    handle_failure "$1" "$1 returned $RESULT, expected $2"
  fi
}

# TODO: Pick up where we left off

test 'src/basic-return.zn' 30
test 'src/basic-swap-0.zn' 0
test 'src/basic-swap-1.zn' 1
test 'src/basic-call.zn' 30
test 'src/if.zn' 7
test 'src/cmp.zn' 0
test 'src/structs.zn' 0
test 'src/binops.zn' 0
test 'src/unops.zn' 0
test 'src/calls.zn' 0
test 'src/multiple-assign-16.zn' 0

