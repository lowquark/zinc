
// Arguments to functions are tagged with access to tell the compiler they may be modified. This ensures code cannot
// modify an object it does not have access to just because it calls an appropriate function.

struct vec2f {
  public float x;
  public float y;
}

module vec2f {
  function add(vec2f a, vec2f b) -> vec2f {
    vec2f result;
    result.x = a.x + b.x;
    result.y = a.y + b.y;
    return result;
  }

  function addto(access vec2f a, vec2f b) -> vec2f {
    a.x = a.x + b.x;
    a.y = a.y + b.y;
  }
}

struct MyStruct {
  vec2f vec;

  access my_module;
}

module my_module {
  function do_a_thing(access MyStruct ms) {
    // Ok - The contents of ms are accessible to this module, and ms is tagged with access
    vec2f:addto(ms.vec, ms.vec);
  }

  function do_another_thing(MyStruct ms) {
    // Not ok - This module might have access to the contents of MyStruct, but ms is not tagged with access
    vec2f:addto(ms.vec, ms.vec);
  }
}

module some_module {
  MyStruct my_struct;
  vec2f other_vec;

  function test() {
    // Not ok - We need access to the contents of my_struct.vec in order to call this function
    vec2f:addto(my_struct.vec, my_struct.vec);
    // Ok - my_struct.vec is still usable as an argument not tagged with access
    vec2f:add(my_struct.vec, my_struct.vec);
    // Ok - Since we have access to other_vec, we can call a function which may modify it
    vec2f:addto(other_vec, other_vec);
    // Ok - Since we have access to my_struct, we can call a function which may modify it
    my_module:do_a_thing(my_struct);
  }
}

